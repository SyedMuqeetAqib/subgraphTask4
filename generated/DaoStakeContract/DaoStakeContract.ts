// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class BaseInterestUpdated extends ethereum.Event {
  get params(): BaseInterestUpdated__Params {
    return new BaseInterestUpdated__Params(this);
  }
}

export class BaseInterestUpdated__Params {
  _event: BaseInterestUpdated;

  constructor(event: BaseInterestUpdated) {
    this._event = event;
  }

  get _newRate(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _oldRate(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class StakeCompleted extends ethereum.Event {
  get params(): StakeCompleted__Params {
    return new StakeCompleted__Params(this);
  }
}

export class StakeCompleted__Params {
  _event: StakeCompleted;

  constructor(event: StakeCompleted) {
    this._event = event;
  }

  get altQuantity(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get initiationTimestamp(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get durationTimestamp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get rewardAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get staker(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get phnxContractAddress(): Address {
    return this._event.parameters[5].value.toAddress();
  }

  get portalAddress(): Address {
    return this._event.parameters[6].value.toAddress();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Unstake extends ethereum.Event {
  get params(): Unstake__Params {
    return new Unstake__Params(this);
  }
}

export class Unstake__Params {
  _event: Unstake;

  constructor(event: Unstake) {
    this._event = event;
  }

  get staker(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get stakedToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get portalAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get altQuantity(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get durationTimestamp(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class DaoStakeContract__stakerDataResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: Address;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: Address
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    return map;
  }
}

export class DaoStakeContract extends ethereum.SmartContract {
  static bind(address: Address): DaoStakeContract {
    return new DaoStakeContract("DaoStakeContract", address);
  }

  getTotalrewardTokens(): BigInt {
    let result = super.call(
      "getTotalrewardTokens",
      "getTotalrewardTokens():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getTotalrewardTokens(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalrewardTokens",
      "getTotalrewardTokens():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxStakedQuantity(): BigInt {
    let result = super.call(
      "maxStakedQuantity",
      "maxStakedQuantity():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_maxStakedQuantity(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxStakedQuantity",
      "maxStakedQuantity():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  phnxContractAddress(): Address {
    let result = super.call(
      "phnxContractAddress",
      "phnxContractAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_phnxContractAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "phnxContractAddress",
      "phnxContractAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ratio(): BigInt {
    let result = super.call("ratio", "ratio():(uint256)", []);

    return result[0].toBigInt();
  }

  try_ratio(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("ratio", "ratio():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakeALT(_altQuantity: BigInt, _days: BigInt): BigInt {
    let result = super.call("stakeALT", "stakeALT(uint256,uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_altQuantity),
      ethereum.Value.fromUnsignedBigInt(_days)
    ]);

    return result[0].toBigInt();
  }

  try_stakeALT(
    _altQuantity: BigInt,
    _days: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "stakeALT",
      "stakeALT(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_altQuantity),
        ethereum.Value.fromUnsignedBigInt(_days)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakeDays(): BigInt {
    let result = super.call("stakeDays", "stakeDays():(uint256)", []);

    return result[0].toBigInt();
  }

  try_stakeDays(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("stakeDays", "stakeDays():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakerBalance(param0: Address): BigInt {
    let result = super.call(
      "stakerBalance",
      "stakerBalance(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_stakerBalance(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "stakerBalance",
      "stakerBalance(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakerData(param0: BigInt): DaoStakeContract__stakerDataResult {
    let result = super.call(
      "stakerData",
      "stakerData(uint256):(uint256,uint256,uint256,uint256,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new DaoStakeContract__stakerDataResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toAddress()
    );
  }

  try_stakerData(
    param0: BigInt
  ): ethereum.CallResult<DaoStakeContract__stakerDataResult> {
    let result = super.tryCall(
      "stakerData",
      "stakerData(uint256):(uint256,uint256,uint256,uint256,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DaoStakeContract__stakerDataResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toAddress()
      )
    );
  }

  totalStakedTokens(): BigInt {
    let result = super.call(
      "totalStakedTokens",
      "totalStakedTokens():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalStakedTokens(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalStakedTokens",
      "totalStakedTokens():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  unstakeALT(_expiredTimestamps: Array<BigInt>, _amount: BigInt): BigInt {
    let result = super.call(
      "unstakeALT",
      "unstakeALT(uint256[],uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigIntArray(_expiredTimestamps),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_unstakeALT(
    _expiredTimestamps: Array<BigInt>,
    _amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "unstakeALT",
      "unstakeALT(uint256[],uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigIntArray(_expiredTimestamps),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetPheonixContractAddressCall extends ethereum.Call {
  get inputs(): SetPheonixContractAddressCall__Inputs {
    return new SetPheonixContractAddressCall__Inputs(this);
  }

  get outputs(): SetPheonixContractAddressCall__Outputs {
    return new SetPheonixContractAddressCall__Outputs(this);
  }
}

export class SetPheonixContractAddressCall__Inputs {
  _call: SetPheonixContractAddressCall;

  constructor(call: SetPheonixContractAddressCall) {
    this._call = call;
  }

  get _address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetPheonixContractAddressCall__Outputs {
  _call: SetPheonixContractAddressCall;

  constructor(call: SetPheonixContractAddressCall) {
    this._call = call;
  }
}

export class StakeALTCall extends ethereum.Call {
  get inputs(): StakeALTCall__Inputs {
    return new StakeALTCall__Inputs(this);
  }

  get outputs(): StakeALTCall__Outputs {
    return new StakeALTCall__Outputs(this);
  }
}

export class StakeALTCall__Inputs {
  _call: StakeALTCall;

  constructor(call: StakeALTCall) {
    this._call = call;
  }

  get _altQuantity(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _days(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class StakeALTCall__Outputs {
  _call: StakeALTCall;

  constructor(call: StakeALTCall) {
    this._call = call;
  }

  get rewardAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnPauseCall extends ethereum.Call {
  get inputs(): UnPauseCall__Inputs {
    return new UnPauseCall__Inputs(this);
  }

  get outputs(): UnPauseCall__Outputs {
    return new UnPauseCall__Outputs(this);
  }
}

export class UnPauseCall__Inputs {
  _call: UnPauseCall;

  constructor(call: UnPauseCall) {
    this._call = call;
  }
}

export class UnPauseCall__Outputs {
  _call: UnPauseCall;

  constructor(call: UnPauseCall) {
    this._call = call;
  }
}

export class UnstakeALTCall extends ethereum.Call {
  get inputs(): UnstakeALTCall__Inputs {
    return new UnstakeALTCall__Inputs(this);
  }

  get outputs(): UnstakeALTCall__Outputs {
    return new UnstakeALTCall__Outputs(this);
  }
}

export class UnstakeALTCall__Inputs {
  _call: UnstakeALTCall;

  constructor(call: UnstakeALTCall) {
    this._call = call;
  }

  get _expiredTimestamps(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UnstakeALTCall__Outputs {
  _call: UnstakeALTCall;

  constructor(call: UnstakeALTCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class UpdateQuantityCall extends ethereum.Call {
  get inputs(): UpdateQuantityCall__Inputs {
    return new UpdateQuantityCall__Inputs(this);
  }

  get outputs(): UpdateQuantityCall__Outputs {
    return new UpdateQuantityCall__Outputs(this);
  }
}

export class UpdateQuantityCall__Inputs {
  _call: UpdateQuantityCall;

  constructor(call: UpdateQuantityCall) {
    this._call = call;
  }

  get _quantity(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateQuantityCall__Outputs {
  _call: UpdateQuantityCall;

  constructor(call: UpdateQuantityCall) {
    this._call = call;
  }
}

export class UpdateRatioCall extends ethereum.Call {
  get inputs(): UpdateRatioCall__Inputs {
    return new UpdateRatioCall__Inputs(this);
  }

  get outputs(): UpdateRatioCall__Outputs {
    return new UpdateRatioCall__Outputs(this);
  }
}

export class UpdateRatioCall__Inputs {
  _call: UpdateRatioCall;

  constructor(call: UpdateRatioCall) {
    this._call = call;
  }

  get _rate(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateRatioCall__Outputs {
  _call: UpdateRatioCall;

  constructor(call: UpdateRatioCall) {
    this._call = call;
  }
}

export class UpdateTimeCall extends ethereum.Call {
  get inputs(): UpdateTimeCall__Inputs {
    return new UpdateTimeCall__Inputs(this);
  }

  get outputs(): UpdateTimeCall__Outputs {
    return new UpdateTimeCall__Outputs(this);
  }
}

export class UpdateTimeCall__Inputs {
  _call: UpdateTimeCall;

  constructor(call: UpdateTimeCall) {
    this._call = call;
  }

  get _time(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateTimeCall__Outputs {
  _call: UpdateTimeCall;

  constructor(call: UpdateTimeCall) {
    this._call = call;
  }
}

export class UpdatestakeDaysCall extends ethereum.Call {
  get inputs(): UpdatestakeDaysCall__Inputs {
    return new UpdatestakeDaysCall__Inputs(this);
  }

  get outputs(): UpdatestakeDaysCall__Outputs {
    return new UpdatestakeDaysCall__Outputs(this);
  }
}

export class UpdatestakeDaysCall__Inputs {
  _call: UpdatestakeDaysCall;

  constructor(call: UpdatestakeDaysCall) {
    this._call = call;
  }

  get _stakeDays(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdatestakeDaysCall__Outputs {
  _call: UpdatestakeDaysCall;

  constructor(call: UpdatestakeDaysCall) {
    this._call = call;
  }
}

export class WithdrawTokensCall extends ethereum.Call {
  get inputs(): WithdrawTokensCall__Inputs {
    return new WithdrawTokensCall__Inputs(this);
  }

  get outputs(): WithdrawTokensCall__Outputs {
    return new WithdrawTokensCall__Outputs(this);
  }
}

export class WithdrawTokensCall__Inputs {
  _call: WithdrawTokensCall;

  constructor(call: WithdrawTokensCall) {
    this._call = call;
  }
}

export class WithdrawTokensCall__Outputs {
  _call: WithdrawTokensCall;

  constructor(call: WithdrawTokensCall) {
    this._call = call;
  }
}
